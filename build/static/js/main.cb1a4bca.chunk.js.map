{"version":3,"sources":["services/blogs.js","services/login.js","components/Notification.js","components/Toggleable.js","components/BlogForm.js","components/Blog.js","components/BlogList.js","components/LoginForm.js","App.js","index.js"],"names":["token","getAll","a","axios","get","response","data","create","newObject","config","headers","Authorization","post","update","id","put","setToken","newToken","deleteBlog","delete","login","credentials","Notification","message","type","className","text","Toggleable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","initiallyHiddenChildren","initiallyShownChildren","undefined","children","length","filter","child","initial_state","buttonLabel2","buttonLabel1","style","onClick","displayName","BlogForm","createBlog","title","setTitle","author","setAuthor","url","setUrl","addBlog","event","preventDefault","onSubmit","name","value","onChange","target","Blog","blog","updateBlog","user","blogTitleAndAuthor","addLike","updatedBlog","likes","confirmDeletion","window","confirm","createdByCurrentUser","BlogList","blogs","orderedBlogs","sort","b","map","i","key","LoginForm","username","password","handleUsernameChange","handlePasswordChange","handleLogin","App","setBlogs","setUsername","setPassword","setUser","notification","setNotification","useEffect","blogService","then","loggedUserJSON","localStorage","getItem","JSON","parse","notificationTimeout","setTimeout","loginService","setItem","stringify","blogFormRef","useRef","current","concat","error","blogId","removeItem","exception","ReactDOM","render","document","getElementById"],"mappings":"gRAGIA,EAAQ,KAsCG,GAAEC,OAhCL,uCAAG,4BAAAC,EAAA,sEACUC,IAAMC,IATf,cAQD,cACPC,EADO,yBAENA,EAASC,MAFH,2CAAH,qDAgCaC,OA3Bb,uCAAG,WAAMC,GAAN,iBAAAN,EAAA,6DACPO,EAAS,CACbC,QAAS,CAAEC,cAAeX,IAFf,SAOUG,IAAMS,KApBf,aAoB6BJ,EAAWC,GAPzC,cAOPJ,EAPO,yBAQNA,EAASC,MARH,2CAAH,sDA2BqBO,OAhBrB,uCAAG,WAAOC,EAAIN,GAAX,eAAAN,EAAA,sEACUC,IAAMY,IAAN,UAzBT,aAyBS,YAA0BD,GAAMN,GAD1C,cACPH,EADO,yBAENA,EAASC,MAFH,2CAAH,wDAgB6BU,SApCxB,SAAAC,GACfjB,EAAK,iBAAaiB,IAmC+BC,WAVnC,uCAAG,WAAMJ,GAAN,iBAAAZ,EAAA,6DACXO,EAAS,CACbC,QAAS,CAAEC,cAAeX,IAFX,SAKMG,IAAMgB,OAAN,UAnCT,aAmCS,YAA2BL,GAAML,GALvC,cAKXJ,EALW,yBAMVA,EAASC,MANC,2CAAH,uDCpBD,GAAEc,MAPN,uCAAG,WAAMC,GAAN,eAAAnB,EAAA,sEACWC,IAAMS,KAJf,aAI6BS,GAD/B,cACNhB,EADM,yBAILA,EAASC,MAJJ,2CAAH,uDCYIgB,G,MAdM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAqB,OAAjBA,EAAQC,KACH,KAKL,yBAAKC,UAAS,uBAAkBF,EAAQC,OACrCD,EAAQG,QCJXC,EAAaC,IAAMC,YAAW,SAACC,EAAOC,GAAS,IAAD,EAEpBC,oBAAS,GAFW,mBAE3CC,EAF2C,KAElCC,EAFkC,KAK5CC,EAAkB,CAAEC,QAASH,EAAU,OAAS,IAChDI,EAAkB,CAAED,QAASH,EAAU,GAAK,QAE5CK,EAAmB,WACvBJ,GAAYD,IAIdM,8BAAoBR,GAAK,WACvB,MAAO,CACLO,uBAKJ,IAAIE,EAA0B,KAC1BC,EAAyB,KAK7B,QAA8BC,IAA1BZ,EAAMa,SAASC,OACjBJ,EAA0BV,EAAMa,SAASE,QAAO,SAAAC,GAAK,QAAMA,GAAuC,SAA9BA,EAAMhB,MAAMiB,iBAChFN,EAAyBX,EAAMa,SAASE,QAAO,SAAAC,GAAK,QAAMA,GAAuC,SAA9BA,EAAMhB,MAAMiB,sBAG1E,GAAIjB,EAAMa,SAASb,MAAMiB,cAAe,CAEvB,SADIjB,EAAMa,SAASb,MAAMiB,cAChBP,EAA0BV,EAAMa,SAAWF,EAAyBX,EAAMa,SAI3G,IAAIK,EAAelB,EAAMkB,aAMzB,OALKlB,EAAMkB,eACTA,EAAelB,EAAMmB,cAKrB,yBAAKxB,UAAU,wBACb,yBAAKA,UAAU,6BAA6ByB,MAAOf,GACjD,4BAAQgB,QAASb,GAAmBR,EAAMmB,cACzCR,GAEH,yBAAKhB,UAAU,8BAA8ByB,MAAOb,GAClD,4BAAQc,QAASb,GAAmBU,GACnCR,OAaTb,EAAWyB,YAAc,YAEVzB,QCFA0B,EAnEE,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EAETtB,mBAAS,IAFA,mBAE5BuB,EAF4B,KAErBC,EAFqB,OAGPxB,mBAAS,IAHF,mBAG5ByB,EAH4B,KAGpBC,EAHoB,OAIb1B,mBAAS,IAJI,mBAI5B2B,EAJ4B,KAIvBC,EAJuB,KAY7BC,EAAO,uCAAG,WAAOC,GAAP,SAAA5D,EAAA,sDACd4D,EAAMC,iBAQNT,EANkB,CAChBC,QACAE,SACAE,QAXFH,EAAS,IACTE,EAAU,IACVE,EAAO,IAGO,2CAAH,sDAeb,OACE,yBAAKnC,UAAU,sBACb,0CACA,0BAAMuC,SAAUH,GACd,qCAEE,2BACE/C,GAAG,uBACHU,KAAK,OACLyC,KAAK,QACLC,MAAOX,EACPY,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBZ,EAASY,EAAOF,WAG9C,sCAEE,2BACEpD,GAAG,wBACHU,KAAK,OACLyC,KAAK,SACLC,MAAOT,EACPU,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBV,EAAUU,EAAOF,WAG/C,mCAEE,2BACEpD,GAAG,qBACHU,KAAK,OACLyC,KAAK,MACLC,MAAOP,EACPQ,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBR,EAAOQ,EAAOF,WAG5C,4BAAQzC,UAAU,yBAAyBD,KAAK,UAAhD,aCPO6C,EArDF,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,WAAYrD,EAAuB,EAAvBA,WAAYsD,EAAW,EAAXA,KAEtCC,EAAqB,kBACzB,yBAAKhD,UAAU,wBAAwBsB,cAAc,QAArD,IAA8DuB,EAAKf,MAAnE,QAA+Ee,EAAKb,SAehFiB,EAAO,uCAAG,4BAAAxE,EAAA,6DACRyE,EAAc,CAClBlB,OAAQa,EAAKb,OACbmB,MAAON,EAAKM,MAAQ,EACpBrB,MAAOe,EAAKf,MACZiB,KAAMF,EAAKE,KAAK1D,IALJ,SAQRyD,EAAWD,EAAKxD,GAAI6D,GARZ,2CAAH,qDAWPE,EAAkB,WAClBC,OAAOC,QAAP,sBAA8BT,EAAKf,MAAnC,eAA+Ce,EAAKb,OAApD,OAEFvC,EAAWoD,EAAKxD,KAIdkE,EAAwBR,EAAK1D,KAAOwD,EAAKE,KAAK1D,GAMpD,OACE,kBAAC,EAAD,CAAYmC,aAAa,OAAOD,aAAa,QAC1CyB,IApCH,yBAAKhD,UAAU,eAAesB,cAAc,QACzC0B,IACD,yBAAKhD,UAAU,iBACb,yBAAKA,UAAU,YAAY6C,EAAKX,KAChC,yBAAKlC,UAAU,cAAf,UAAoC6C,EAAKM,MAAzC,IAAgD,4BAAQzB,QAASuB,GAAjB,SAChD,yBAAKjD,UAAU,gBAAf,qBAAiD6C,EAAKE,KAAKP,QAkC5De,GARH,4BAAQvD,UAAU,qBAAqBsB,cAAc,OAAOI,QAAS0B,GAArE,iBCXWI,EA5BE,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOX,EAAmC,EAAnCA,WAAYrD,EAAuB,EAAvBA,WAAYsD,EAAW,EAAXA,KAE3CW,EAAeD,EAAME,MAAK,SAAClF,EAAGmF,GAClC,OAAInF,EAAE0E,MAAQS,EAAET,OACN,EACC1E,EAAE0E,MAAQS,EAAET,MACd,EAEA,KAIX,OACE,yBAAKnD,UAAU,sBAGX0D,EAAaG,KAAI,SAAChB,EAAMiB,GAAP,OAEf,yBAAK9D,UAAU,iBAAiB+D,IAAKD,GACnC,kBAAC,EAAD,CAAMC,IAAKlB,EAAKxD,GAAIwD,KAAMA,EAAMC,WAAYA,EAAYrD,WAAYA,EAAYsD,KAAMA,UCqBnFiB,EAzCG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,SAAUC,EAAvB,EAAuBA,qBAAsBC,EAA7C,EAA6CA,qBAAsBC,EAAnE,EAAmEA,YAAnE,OAEhB,yBAAKrE,UAAU,cACb,qDACA,0BAAMuC,SAAU8B,GACd,wCAEE,2BACErE,UAAU,uBACVD,KAAK,OACL0C,MAAOwB,EACPzB,KAAK,WACLE,SAAUyB,KAGd,wCAEE,2BACEnE,UAAU,uBACVD,KAAK,WACL0C,MAAOyB,EACP1B,KAAK,WACLE,SAAU0B,KAGd,4BAAQpE,UAAU,eAAeD,KAAK,UAAtC,YC8JSuE,EA/KH,WAAO,IAAD,EACU/D,mBAAS,IADnB,mBACTkD,EADS,KACFc,EADE,OAEgBhE,mBAAS,IAFzB,mBAET0D,EAFS,KAECO,EAFD,OAGgBjE,mBAAS,IAHzB,mBAGT2D,EAHS,KAGCO,EAHD,OAIQlE,mBAAS,MAJjB,mBAITwC,EAJS,KAIH2B,EAJG,OAKwBnE,mBAAS,CAAER,KAAM,KAAME,KAAM,OALrD,mBAKT0E,EALS,KAKKC,EALL,KAOhBC,qBAAU,WACRC,EAAYtG,SAASuG,MAAK,SAAAtB,GAAK,OAC7Bc,EAASd,QAEV,IAMHoB,qBAAU,WACR,IAAMG,EAAiB3B,OAAO4B,aAAaC,QAAQ,qBACnD,GAAIF,EAAgB,CAClB,IAAMjC,EAAOoC,KAAKC,MAAMJ,GACxBN,EAAQ3B,GACR+B,EAAYvF,SAASwD,EAAKxE,UAE3B,IAIH,IAAM8G,EAAsB,WAC1BC,YAAW,WACTV,EACE,CACE7E,KAAM,KACNE,KAAM,SAGT,MAICoE,EAAW,uCAAG,WAAOhC,GAAP,eAAA5D,EAAA,6DAElB4D,EAAMC,iBAFY,kBAOGiD,EAAa5F,MAAM,CACpCsE,WAAUC,aARI,OAOVnB,EAPU,OAehBM,OAAO4B,aAAaO,QAClB,oBAAqBL,KAAKM,UAAU1C,IAGtC+B,EAAYvF,SAASwD,EAAKxE,OAC1BmG,EAAQ3B,GACRyB,EAAY,IACZC,EAAY,IAEZG,EAAgB,CAAE7E,KAAM,UAAWE,KAAM,qBACzCoF,IAzBgB,kDA4BhBT,EAAgB,CAAE7E,KAAM,QAASE,KAAM,+BACvCoF,IA7BgB,0DAAH,sDAsDXK,EAAcC,mBAEdvD,EAAO,uCAAG,WAAOrD,GAAP,eAAAN,EAAA,sEAGZiH,EAAYE,QAAQ/E,mBAHR,SAKWiE,EAAYhG,OAAOC,GAL9B,OAKNH,EALM,OAOZ2F,EAASd,EAAMoC,OAAOjH,IAEtBgG,EAAgB,CAAE7E,KAAM,UAAWE,KAAK,SAAD,OAAWlB,EAAU+C,MAArB,aACvCuD,IAVY,kDAcZT,EAAgB,CAAE7E,KAAM,QAASE,KAAM,KAAUrB,SAASC,KAAKiH,QAC/DT,IAfY,0DAAH,sDAoBPvC,EAAU,uCAAG,WAAOiD,EAAQ7C,GAAf,eAAAzE,EAAA,+EAEQqG,EAAY1F,OAAO2G,EAAQ7C,GAFnC,OAETtE,EAFS,OAIf2F,EAASd,EAAMI,KAAI,SAAAhB,GAAI,OAAIA,EAAKxD,KAAO0G,EAASnH,EAAWiE,MAJ5C,gDAOf+B,EAAgB,CAAE7E,KAAM,QAASE,KAAM,KAAUrB,SAASC,KAAKiH,QAC/DT,IARe,yDAAH,wDAYV5F,EAAU,uCAAG,WAAOsG,GAAP,SAAAtH,EAAA,+EAETqG,EAAYrF,WAAWsG,GAFd,OAIfxB,EAASd,EAAMrC,QAAO,SAAAyB,GAAI,OAAIA,EAAKxD,KAAO0G,MAJ3B,gDAMfnB,EAAgB,CAAE7E,KAAM,QAASE,KAAM,KAAUrB,SAASC,KAAKiH,QAC/DT,IAPe,yDAAH,sDAehB,OAEE,6BACE,kBAAC,EAAD,CAAcvF,QAAS6E,IAKb,OAAT5B,EACC,kBAAC,EAAD,CACEkB,SAAUA,EACVC,SAAUA,EACVC,qBAAsB,gBAAGxB,EAAH,EAAGA,OAAH,OAAgB6B,EAAY7B,EAAOF,QACzD2B,qBAAsB,gBAAGzB,EAAH,EAAGA,OAAH,OAAgB8B,EAAY9B,EAAOF,QACzD4B,YAAaA,IAEf,6BACE,qCACA,yBAAKhF,GAAG,kBAAkB0D,EAAKP,KAA/B,aAA8C,4BAAQzC,KAAK,SAAS2B,QAtFvD,WACnB,GAAI2B,OAAOC,QAAQ,oCACjB,IACEoB,EAAQ,MACRrB,OAAO4B,aAAae,WAAW,qBAE/BpB,EAAgB,CAAE7E,KAAM,UAAWE,KAAM,4BACzCoF,IACA,MAAOY,GACPrB,EAAgB,CAAE7E,KAAM,QAASE,KAAM,qBACvCoF,OA4EgD,WAE9C,kBAAC,EAAD,CAAY7D,aAAa,WAAWD,aAAa,SAASjB,IAAKoF,GAC7D,kBAAC,EAAD,CAAUpE,cAAc,OAAOO,WAAYO,KAG7C,kBAAC,EAAD,CAAUqB,MAAOA,EAAOX,WAAYA,EAAYrD,WAAYA,EAAYsD,KAAMA,OC9KxFmD,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.cb1a4bca.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nlet token = null\n\nconst setToken = newToken => {\n  token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n  const response = await axios.get(baseUrl)\n  return response.data\n}\n\nconst create = async newObject => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  // If the second parameter is an object, Axios sets the content-type header to application/json, but we can override it adding a different config to the third (options) parameter.\n  // In this case, we only add the authorization header to the options parameter, with the token required by the backend to create new blogs.\n  const response = await axios.post(baseUrl, newObject, config)\n  return response.data\n}\n\nconst update = async (id, newObject) => {\n  const response = await axios.put(`${ baseUrl }/${id}`, newObject)\n  return response.data\n}\n\n// delete is a protected word in Javascript, so we have to find a different name for the handler.\nconst deleteBlog = async id => {\n  const config = {\n    headers: { Authorization: token },\n  }\n\n  const response = await axios.delete(`${baseUrl}/${id}`, config)\n  return response.data\n}\n\n\nexport default { getAll, create, update, setToken, deleteBlog }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\n// the credentials are just the username and password sent from handleLogin() in app.js\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n\n  // the response includes name, username and token.\n  return response.data\n}\n\nexport default { login }","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message.type === null) {\n    return null\n  }\n  else {\n    return (\n      // Add two class names, one common for all notifications and one for the specific type (error, success, exception)\n      <div className={`notification ${message.type}`}>\n        {message.text}\n      </div>\n    )\n  }\n}\n\nexport default Notification","import React, { useState, useImperativeHandle } from 'react'\n\n// The prop-types library is used to define mandatory props for comonents:\nimport PropTypes from 'prop-types'\n\n// Wrapping the functioninside a forwardRef funciton call gives the component access the ref assigned to it.\nconst Toggleable = React.forwardRef((props, ref) => {\n\n  const [visible, setVisible] = useState(false)\n\n  // Note that these are applied as inline styles in the divs below.\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  // this hook makes the toggleVisibility fucntion available outside the component\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n\n  let initiallyHiddenChildren = null\n  let initiallyShownChildren = null\n\n  // This is an attempt to allow the reusable Toggleable module to render elements with different initial hide/show states.\n  // When only one child is present, the shildren don't come in an array of objects, so the filter method throws an error\n  // !! child filters out all falsy elements (0, null, undefined...), as child.props throws an error otherwise.\n  if (props.children.length !== undefined) {\n    initiallyHiddenChildren = props.children.filter(child => !!child && child.props.initial_state === 'hide')\n    initiallyShownChildren = props.children.filter(child => !!child && child.props.initial_state === 'show')\n\n    // The else if condition is meant to be selected when only one valid child is passed (and to prevent errors if no children are passed)\n  } else if (props.children.props.initial_state) {\n    const childInitialState = props.children.props.initial_state\n    childInitialState === 'hide' ? initiallyHiddenChildren = props.children : initiallyShownChildren = props.children\n\n  }\n\n  let buttonLabel2 = props.buttonLabel2\n  if (!props.buttonLabel2) {\n    buttonLabel2 = props.buttonLabel1\n  }\n\n  // The children of the Toggleable component have an property determining which will be shown initially and which will be hidden.\n  return (\n    <div className=\"toggleable-container\">\n      <div className=\"toggleable-initially-shown\" style={hideWhenVisible}>\n        <button onClick={toggleVisibility}>{props.buttonLabel1}</button>\n        {initiallyShownChildren}\n      </div>\n      <div className=\"toggleable-initially-hidden\" style={showWhenVisible}>\n        <button onClick={toggleVisibility}>{buttonLabel2}</button>\n        {initiallyHiddenChildren}\n      </div>\n    </div>\n  )\n})\n\n\n// Setting mandatory props for Toggleable component with the library prop-types\nToggleable.propTypes = {\n  buttonLabel1: PropTypes.string.isRequired\n}\n\n// This command fixes an error with lint regarding the component Togglable not having a name\nToggleable.displayName = 'Togglable'\n\nexport default Toggleable","\nimport React, { useState } from 'react'\n\nconst BlogForm = ({ createBlog }) => {\n\n  const [title, setTitle] = useState('')\n  const [author, setAuthor] = useState('')\n  const [url, setUrl] = useState('')\n\n  const clearBlogFormFields = () => {\n    setTitle('')\n    setAuthor('')\n    setUrl('')\n  }\n\n  const addBlog = async (event) => {\n    event.preventDefault()\n\n    const newObject = {\n      title,\n      author,\n      url\n    }\n\n    createBlog(newObject)\n\n    clearBlogFormFields()\n  }\n\n\n  return (\n    <div className=\"blogform-container\">\n      <h2>create new</h2>\n      <form onSubmit={addBlog}>\n        <div>\n          title\n          <input\n            id=\"blogform-title-input\"\n            type=\"text\"\n            name=\"title\"\n            value={title}\n            onChange={({ target }) => setTitle(target.value)}\n          />\n        </div>\n        <div>\n          author\n          <input\n            id=\"blogform-author-input\"\n            type=\"text\"\n            name=\"author\"\n            value={author}\n            onChange={({ target }) => setAuthor(target.value)}\n          />\n        </div>\n        <div>\n          url\n          <input\n            id=\"blogform-url-input\"\n            type=\"text\"\n            name=\"url\"\n            value={url}\n            onChange={({ target }) => setUrl(target.value)}\n          />\n        </div>\n        <button className=\"blogform-create-button\" type=\"create\">create</button>\n      </form>\n    </div>\n  )\n}\n\nexport default BlogForm","import React from 'react'\nimport Toggleable from './Toggleable'\n\n\nconst Blog = ({ blog, updateBlog, deleteBlog, user }) => {\n\n  const blogTitleAndAuthor = () => (\n    <div className=\"blog-title-and-author\" initial_state=\"show\"> {blog.title}, by {blog.author}</div>\n  )\n\n\n  const extendedBlog = () => (\n    <div className=\"blog-content\" initial_state=\"hide\">\n      {blogTitleAndAuthor()}\n      <div className=\"extended-blog\">\n        <div className=\"url-line\">{blog.url}</div>\n        <div className=\"likes-line\">likes: {blog.likes} <button onClick={addLike}>like</button></div>\n        <div className=\"creator-line\">Entry created by: {blog.user.name}</div>\n      </div>\n    </div>\n  )\n\n  const addLike = async () => {\n    const updatedBlog = {\n      author: blog.author,\n      likes: blog.likes + 1,\n      title: blog.title,\n      user: blog.user.id\n    }\n\n    await updateBlog(blog.id, updatedBlog)\n  }\n\n  const confirmDeletion = () => {\n    if (window.confirm(`Remove blog ${blog.title} by ${blog.author}?`)) {\n\n      deleteBlog(blog.id)\n    }\n  }\n\n  const createdByCurrentUser = (user.id === blog.user.id)\n\n  const deleteButton = () => (\n    <button className=\"blog-delete-button\" initial_state=\"hide\" onClick={confirmDeletion}>Delete blog</button>\n  )\n\n  return (\n    <Toggleable buttonLabel1='view' buttonLabel2='hide'>\n      {blogTitleAndAuthor()}\n      {extendedBlog()}\n      {/* The delete button is only shown if the current logged in user is the creator of the blog entry */}\n      {createdByCurrentUser && deleteButton()}\n    </Toggleable>\n  )\n\n\n}\nexport default Blog\n\n","import React from 'react'\nimport Blog from './Blog'\n\n\nconst BlogList = ({ blogs, updateBlog, deleteBlog, user }) => {\n\n  const orderedBlogs = blogs.sort((a, b) => {\n    if (a.likes > b.likes) {\n      return -1\n    } else if (a.likes < b.likes) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  \n  return (\n    <div className=\"bloglist-container\">\n      {\n        // Remember that in react, each item of a list must be provided a unique key.\n        orderedBlogs.map((blog, i) =>\n          // Remember that class is a keyword in JS and JSX, so className has to be used instead of class when working with React.\n          <div className=\"blog-container\" key={i}>\n            <Blog key={blog.id} blog={blog} updateBlog={updateBlog} deleteBlog={deleteBlog} user={user} />\n          </div>\n        )\n      }\n    </div>\n  )\n}\n\n\nexport default BlogList","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({ username, password, handleUsernameChange, handlePasswordChange, handleLogin }) => (\n\n  <div className=\"login-form\">\n    <h2>Log in to application</h2>\n    <form onSubmit={handleLogin}>\n      <div>\n        username\n        <input\n          className=\"login-username-input\"\n          type=\"text\"\n          value={username}\n          name=\"Username\"\n          onChange={handleUsernameChange}\n        />\n      </div>\n      <div>\n        password\n        <input\n          className=\"login-password-input\"\n          type=\"password\"\n          value={password}\n          name=\"Password\"\n          onChange={handlePasswordChange}\n        />\n      </div>\n      <button className=\"login-button\" type=\"submit\">login</button>\n    </form>\n  </div>\n)\n\n\n\nLoginForm.propTypes = {\n  handleLogin: PropTypes.func.isRequired,\n  handleUsernameChange: PropTypes.func.isRequired,\n  handlePasswordChange: PropTypes.func.isRequired,\n  username: PropTypes.string.isRequired,\n  password: PropTypes.string.isRequired\n}\n\n\nexport default LoginForm","import React, { useState, useEffect, useRef } from 'react'\nimport blogService from './services/blogs'\nimport loginService from './services/login'\nimport './App.css'\nimport Notification from './components/Notification'\nimport Toggleable from './components/Toggleable'\nimport BlogForm from './components/BlogForm'\nimport BlogList from './components/BlogList'\nimport LoginForm from './components/LoginForm'\n\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([])\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [user, setUser] = useState(null)\n  const [notification, setNotification] = useState({ type: null, text: null })\n\n  useEffect(() => {\n    blogService.getAll().then(blogs =>\n      setBlogs(blogs)\n    )\n  }, [])\n\n\n  // Effect hook for checking if there is a logged in user in the local storage when we enter the page.\n  // If so, the details are saved to the app's state and to blogService\n  // The empty array ensures that the effect is only executed when the component is rendered for the frist time.\n  useEffect(() => {\n    const loggedUserJSON = window.localStorage.getItem('loggedBlogappUser')\n    if (loggedUserJSON) {\n      const user = JSON.parse(loggedUserJSON)\n      setUser(user)\n      blogService.setToken(user.token)\n    }\n  }, [])\n\n\n\n  const notificationTimeout = () => {\n    setTimeout(() => {\n      setNotification(\n        {\n          type: null,\n          text: null\n        }\n      )\n    }, 5000)\n  }\n\n\n  const handleLogin = async (event) => {\n    // Prevent the default action of submitting the form (which would cause the page to reload).\n    event.preventDefault()\n\n    try {\n      // username and password are the states above\n      // the response (user) will be an object including name, username and token.\n      const user = await loginService.login({\n        username, password,\n      })\n\n      // Save token (the object containing token, username and name) to browser's local storage so that it's available between rerenders.\n      // https://fullstackopen.com/en/part5/login_in_frontend#saving-the-token-to-the-browsers-local-storage\n      // The value saved to local storage is a DOMstring, which need to be parsed to JSON (JSON.stringify) before saving and needs to be parsed back to JS when read (JSON.parse).\n      // The parameters are a key-value pair, the first being the name of the key and the second the value\n      window.localStorage.setItem(\n        'loggedBlogappUser', JSON.stringify(user)\n      )\n\n      blogService.setToken(user.token)\n      setUser(user)\n      setUsername('')\n      setPassword('')\n\n      setNotification({ type: 'success', text: 'Login successful' })\n      notificationTimeout()\n\n    } catch (exception) {\n      setNotification({ type: 'error', text: 'Wrong username or password' })\n      notificationTimeout()\n    }\n  }\n\n\n\n  const handleLogout = () => {\n    if (window.confirm('Are you sure you want to logout?')) {\n      try {\n        setUser(null)\n        window.localStorage.removeItem('loggedBlogappUser')\n\n        setNotification({ type: 'success', text: 'Successfully logged out' })\n        notificationTimeout()\n      } catch (exception) {\n        setNotification({ type: 'error', text: 'Unable to logout' })\n        notificationTimeout()\n      }\n    }\n  }\n\n\n\n  // the useRef hook creates a ref that we will assign to the Toggleable component.\n  // this variable acts as a reference to the component. The same reference is kept between re-renders\n  const blogFormRef = useRef()\n\n  const addBlog = async (newObject) => {\n    try {\n      // close the form when the new blog is created by the user\n      blogFormRef.current.toggleVisibility()\n\n      const response = await blogService.create(newObject)\n\n      setBlogs(blogs.concat(response))\n\n      setNotification({ type: 'success', text: `Blog \"${newObject.title}\" added` })\n      notificationTimeout()\n\n\n    } catch (exception) {\n      setNotification({ type: 'error', text: exception.response.data.error })\n      notificationTimeout()\n    }\n  }\n\n\n  const updateBlog = async (blogId, updatedBlog) => {\n    try {\n      const response = await blogService.update(blogId, updatedBlog)\n\n      setBlogs(blogs.map(blog => blog.id === blogId ? response : blog))\n\n    } catch (exception) {\n      setNotification({ type: 'error', text: exception.response.data.error })\n      notificationTimeout()\n    }\n  }\n\n  const deleteBlog = async (blogId) => {\n    try {\n      await blogService.deleteBlog(blogId)\n\n      setBlogs(blogs.filter(blog => blog.id !== blogId))\n    } catch (exception) {\n      setNotification({ type: 'error', text: exception.response.data.error })\n      notificationTimeout()\n    }\n\n  }\n\n\n\n\n  return (\n\n    <div>\n      <Notification message={notification} />\n\n      {/* A react trick to render forms conditionally. If the first statement is false or falsy, the second statement -which generates the form- is not executed */}\n      {/* user === null depends on an user being logged in or not */}\n      {/* {user === null && LoginForm()}  */}\n      {user === null ?\n        <LoginForm\n          username={username}\n          password={password}\n          handleUsernameChange={({ target }) => setUsername(target.value)}\n          handlePasswordChange={({ target }) => setPassword(target.value)}\n          handleLogin={handleLogin}\n        /> :\n        <div>\n          <h2>blogs</h2>\n          <div id=\"logged-in-line\">{user.name} logged in<button type=\"submit\" onClick={handleLogout}>logout</button></div>\n\n          <Toggleable buttonLabel1='new blog' buttonLabel2='cancel' ref={blogFormRef}>\n            <BlogForm initial_state='hide' createBlog={addBlog} />\n          </Toggleable>\n\n          <BlogList blogs={blogs} updateBlog={updateBlog} deleteBlog={deleteBlog} user={user} />\n        </div>\n      }\n\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}